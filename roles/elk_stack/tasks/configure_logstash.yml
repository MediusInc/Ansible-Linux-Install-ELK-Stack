---
- name: configure_logstash | Load Vars
  include_vars: "main.yml"

- name: configure_logstash | Configure beats listening port
  blockinfile:
    path: "{{ logstash_beat_conf }}"
    owner: root
    group: root
    mode: 0644
    create: true
    backup: true
    block: |
      input {
        beats {
          port => {{ beat_port }}
        }
      }

- name: configure_logstash | Configure Logstash Sys Log Filter
  blockinfile:
    path: "{{ logstash_sysfilter_conf }}"
    owner: root
    group: root
    mode: 0644
    create: true
    backup: true
    block: |
      filter {
        if [fileset][module] == "system" {
          if [fileset][name] == "auth" {
            grok {
              match => { "message" => ["%{SYSLOGTIMESTAMP:[system][auth][timestamp]} %{SYSLOGHOST:[system][auth][hostname]} sshd(?:\[%{POSINT:[system][auth][pid]}\])?: %{DATA:[system][auth][ssh][event]} %{DATA:[system][auth][ssh][method]} for (invalid user )?%{DATA:[system][auth][user]} from %{IPORHOST:[system][auth][ssh][ip]} port %{NUMBER:[system][auth][ssh][port]} ssh2(: %{GREEDYDATA:[system][auth][ssh][signature]})?",
                        "%{SYSLOGTIMESTAMP:[system][auth][timestamp]} %{SYSLOGHOST:[system][auth][hostname]} sshd(?:\[%{POSINT:[system][auth][pid]}\])?: %{DATA:[system][auth][ssh][event]} user %{DATA:[system][auth][user]} from %{IPORHOST:[system][auth][ssh][ip]}",
                        "%{SYSLOGTIMESTAMP:[system][auth][timestamp]} %{SYSLOGHOST:[system][auth][hostname]} sshd(?:\[%{POSINT:[system][auth][pid]}\])?: Did not receive identification string from %{IPORHOST:[system][auth][ssh][dropped_ip]}",
                        "%{SYSLOGTIMESTAMP:[system][auth][timestamp]} %{SYSLOGHOST:[system][auth][hostname]} sudo(?:\[%{POSINT:[system][auth][pid]}\])?: \s*%{DATA:[system][auth][user]} :( %{DATA:[system][auth][sudo][error]} ;)? TTY=%{DATA:[system][auth][sudo][tty]} ; PWD=%{DATA:[system][auth][sudo][pwd]} ; USER=%{DATA:[system][auth][sudo][user]} ; COMMAND=%{GREEDYDATA:[system][auth][sudo][command]}",
                        "%{SYSLOGTIMESTAMP:[system][auth][timestamp]} %{SYSLOGHOST:[system][auth][hostname]} groupadd(?:\[%{POSINT:[system][auth][pid]}\])?: new group: name=%{DATA:system.auth.groupadd.name}, GID=%{NUMBER:system.auth.groupadd.gid}",
                        "%{SYSLOGTIMESTAMP:[system][auth][timestamp]} %{SYSLOGHOST:[system][auth][hostname]} useradd(?:\[%{POSINT:[system][auth][pid]}\])?: new user: name=%{DATA:[system][auth][user][add][name]}, UID=%{NUMBER:[system][auth][user][add][uid]}, GID=%{NUMBER:[system][auth][user][add][gid]}, home=%{DATA:[system][auth][user][add][home]}, shell=%{DATA:[system][auth][user][add][shell]}$",
                        "%{SYSLOGTIMESTAMP:[system][auth][timestamp]} %{SYSLOGHOST:[system][auth][hostname]} %{DATA:[system][auth][program]}(?:\[%{POSINT:[system][auth][pid]}\])?: %{GREEDYMULTILINE:[system][auth][message]}"] }
              pattern_definitions => {
                "GREEDYMULTILINE"=> "(.|\n)*"
              }
              remove_field => "message"
            }
            date {
              match => [ "[system][auth][timestamp]", "MMM  d HH:mm:ss", "MMM dd HH:mm:ss" ]
            }
            geoip {
              source => "[system][auth][ssh][ip]"
              target => "[system][auth][ssh][geoip]"
            }
          }
          else if [fileset][name] == "syslog" {
            grok {
              match => { "message" => ["%{SYSLOGTIMESTAMP:[system][syslog][timestamp]} %{SYSLOGHOST:[system][syslog][hostname]} %{DATA:[system][syslog][program]}(?:\[%{POSINT:[system][syslog][pid]}\])?: %{GREEDYMULTILINE:[system][syslog][message]}"] }
              pattern_definitions => { "GREEDYMULTILINE" => "(.|\n)*" }
              remove_field => "message"
            }
            date {
              match => [ "[system][syslog][timestamp]", "MMM  d HH:mm:ss", "MMM dd HH:mm:ss" ]
            }
          }
        }
      }

- name: configure_logstash | Copy the Template Files
  command:  "{{ item }}"
  with_items:
    - "/usr/bin/filebeat export template > {{ filebeat_template_path }}"
    - "/usr/bin/auditbeat export template > {{ auditbeat_template_path }}"

- name: configure_logstash | Change the Templates Shards and Index Application
  replace:
    path: "{{ item.path }}"
    regexp: "{{ item.regexp }}"
    replace: "{{ item.replace }}"
  with_items:
    - { path: "{{ filebeat_template_path }}", regexp: "filebeat-*", replace: "filebeat-*"}
    - { path: "{{ filebeat_template_path }}", regexp: '"number_of_shards": 3', replace: '"number_of_shards": {{ shards }}' }
    - { path: "{{ auditbeat_template_path }}", regexp: "auditbeat-*", replace: "auditbeat-*"}
    - { path: "{{ auditbeat_template_path }}", regexp: '"number_of_shards": 3', replace: '"number_of_shards": {{ shards }}' }

- name: configure_logstash | Add the Replica Line to the Templates
  lineinfile:
    path: "{{ item }}"
    insertafter: '"number_of_shards": {{ shards }}'
    line: '      "number_of_replicas": {{ replicas }}'
    state: present
  with_items:
    - "{{ filebeat_template_path }}"
    - "{{ auditbeat_template_path }}"

- name: configure_logstash | Configure Logstash's Output
  blockinfile:
    path: "{{ logstash_output_conf }}"
    owner: root
    group: root
    mode: 0644
    create: true
    backup: true
    block: |
      output {
        if [@metadata][beat] =~ "filebeat" {
          elasticsearch {
            hosts => ["{{ server_ip }}:{{ elastic_port }}"]
            index => "%{[@metadata][beat]}-%{+YYYY.MM}"
            manage_template => true
            template_overwrite => true
            template => "/etc/logstash/templates/filebeat.json"
            template_name => "filebeats"
          }
        }
       if [@metadata][beat] =~ "auditbeat" {
          elasticsearch {
            hosts => ["{{ server_ip }}:{{ elastic_port }}"]
            index => "%{[@metadata][beat]}-%{+YYYY.MM}"
            manage_template => true
            template_overwrite => true
            template => "/etc/logstash/templates/auditbeat.json"
            template_name => "auditbeats"
          }
        }
        else {
          elasticsearch {
            hosts => ["{{ server_ip }}:{{ elastic_port }}"]
            index => "%{[@metadata][beat]}-%{+YYYY.MM}"
            manage_template => false
          }
        }
      }

- name: configure_logstash | Start the logstash Service
  service:
    name: logstash
    state: started
    enabled: true
